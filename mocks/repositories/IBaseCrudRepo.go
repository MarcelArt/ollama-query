// Code generated by mockery v2.51.1. DO NOT EDIT.

package repositories

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"

	models "github.com/MarcelArt/ModelCraft/models"

	paginate "github.com/morkid/paginate"
)

// IBaseCrudRepo is an autogenerated mock type for the IBaseCrudRepo type
type IBaseCrudRepo[TModel any, TDto models.IDTO, TPage any] struct {
	mock.Mock
}

type IBaseCrudRepo_Expecter[TModel any, TDto models.IDTO, TPage any] struct {
	mock *mock.Mock
}

func (_m *IBaseCrudRepo[TModel, TDto, TPage]) EXPECT() *IBaseCrudRepo_Expecter[TModel, TDto, TPage] {
	return &IBaseCrudRepo_Expecter[TModel, TDto, TPage]{mock: &_m.Mock}
}

// Create provides a mock function with given fields: input
func (_m *IBaseCrudRepo[TModel, TDto, TPage]) Create(input TDto) (uint, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(TDto) (uint, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(TDto) uint); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(TDto) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBaseCrudRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IBaseCrudRepo_Create_Call[TModel any, TDto models.IDTO, TPage any] struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - input TDto
func (_e *IBaseCrudRepo_Expecter[TModel, TDto, TPage]) Create(input interface{}) *IBaseCrudRepo_Create_Call[TModel, TDto, TPage] {
	return &IBaseCrudRepo_Create_Call[TModel, TDto, TPage]{Call: _e.mock.On("Create", input)}
}

func (_c *IBaseCrudRepo_Create_Call[TModel, TDto, TPage]) Run(run func(input TDto)) *IBaseCrudRepo_Create_Call[TModel, TDto, TPage] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(TDto))
	})
	return _c
}

func (_c *IBaseCrudRepo_Create_Call[TModel, TDto, TPage]) Return(_a0 uint, _a1 error) *IBaseCrudRepo_Create_Call[TModel, TDto, TPage] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBaseCrudRepo_Create_Call[TModel, TDto, TPage]) RunAndReturn(run func(TDto) (uint, error)) *IBaseCrudRepo_Create_Call[TModel, TDto, TPage] {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *IBaseCrudRepo[TModel, TDto, TPage]) Delete(id string) (TModel, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 TModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (TModel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) TModel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBaseCrudRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IBaseCrudRepo_Delete_Call[TModel any, TDto models.IDTO, TPage any] struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *IBaseCrudRepo_Expecter[TModel, TDto, TPage]) Delete(id interface{}) *IBaseCrudRepo_Delete_Call[TModel, TDto, TPage] {
	return &IBaseCrudRepo_Delete_Call[TModel, TDto, TPage]{Call: _e.mock.On("Delete", id)}
}

func (_c *IBaseCrudRepo_Delete_Call[TModel, TDto, TPage]) Run(run func(id string)) *IBaseCrudRepo_Delete_Call[TModel, TDto, TPage] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IBaseCrudRepo_Delete_Call[TModel, TDto, TPage]) Return(_a0 TModel, _a1 error) *IBaseCrudRepo_Delete_Call[TModel, TDto, TPage] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBaseCrudRepo_Delete_Call[TModel, TDto, TPage]) RunAndReturn(run func(string) (TModel, error)) *IBaseCrudRepo_Delete_Call[TModel, TDto, TPage] {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *IBaseCrudRepo[TModel, TDto, TPage]) GetByID(id string) (TModel, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 TModel
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (TModel, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) TModel); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(TModel)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IBaseCrudRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type IBaseCrudRepo_GetByID_Call[TModel any, TDto models.IDTO, TPage any] struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *IBaseCrudRepo_Expecter[TModel, TDto, TPage]) GetByID(id interface{}) *IBaseCrudRepo_GetByID_Call[TModel, TDto, TPage] {
	return &IBaseCrudRepo_GetByID_Call[TModel, TDto, TPage]{Call: _e.mock.On("GetByID", id)}
}

func (_c *IBaseCrudRepo_GetByID_Call[TModel, TDto, TPage]) Run(run func(id string)) *IBaseCrudRepo_GetByID_Call[TModel, TDto, TPage] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IBaseCrudRepo_GetByID_Call[TModel, TDto, TPage]) Return(_a0 TModel, _a1 error) *IBaseCrudRepo_GetByID_Call[TModel, TDto, TPage] {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IBaseCrudRepo_GetByID_Call[TModel, TDto, TPage]) RunAndReturn(run func(string) (TModel, error)) *IBaseCrudRepo_GetByID_Call[TModel, TDto, TPage] {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: c, dest
func (_m *IBaseCrudRepo[TModel, TDto, TPage]) Read(c *fiber.Ctx, dest []TPage) paginate.Page {
	ret := _m.Called(c, dest)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 paginate.Page
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, []TPage) paginate.Page); ok {
		r0 = rf(c, dest)
	} else {
		r0 = ret.Get(0).(paginate.Page)
	}

	return r0
}

// IBaseCrudRepo_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type IBaseCrudRepo_Read_Call[TModel any, TDto models.IDTO, TPage any] struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - dest []TPage
func (_e *IBaseCrudRepo_Expecter[TModel, TDto, TPage]) Read(c interface{}, dest interface{}) *IBaseCrudRepo_Read_Call[TModel, TDto, TPage] {
	return &IBaseCrudRepo_Read_Call[TModel, TDto, TPage]{Call: _e.mock.On("Read", c, dest)}
}

func (_c *IBaseCrudRepo_Read_Call[TModel, TDto, TPage]) Run(run func(c *fiber.Ctx, dest []TPage)) *IBaseCrudRepo_Read_Call[TModel, TDto, TPage] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].([]TPage))
	})
	return _c
}

func (_c *IBaseCrudRepo_Read_Call[TModel, TDto, TPage]) Return(_a0 paginate.Page) *IBaseCrudRepo_Read_Call[TModel, TDto, TPage] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBaseCrudRepo_Read_Call[TModel, TDto, TPage]) RunAndReturn(run func(*fiber.Ctx, []TPage) paginate.Page) *IBaseCrudRepo_Read_Call[TModel, TDto, TPage] {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, input
func (_m *IBaseCrudRepo[TModel, TDto, TPage]) Update(id string, input *TDto) error {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *TDto) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IBaseCrudRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type IBaseCrudRepo_Update_Call[TModel any, TDto models.IDTO, TPage any] struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id string
//   - input *TDto
func (_e *IBaseCrudRepo_Expecter[TModel, TDto, TPage]) Update(id interface{}, input interface{}) *IBaseCrudRepo_Update_Call[TModel, TDto, TPage] {
	return &IBaseCrudRepo_Update_Call[TModel, TDto, TPage]{Call: _e.mock.On("Update", id, input)}
}

func (_c *IBaseCrudRepo_Update_Call[TModel, TDto, TPage]) Run(run func(id string, input *TDto)) *IBaseCrudRepo_Update_Call[TModel, TDto, TPage] {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*TDto))
	})
	return _c
}

func (_c *IBaseCrudRepo_Update_Call[TModel, TDto, TPage]) Return(_a0 error) *IBaseCrudRepo_Update_Call[TModel, TDto, TPage] {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IBaseCrudRepo_Update_Call[TModel, TDto, TPage]) RunAndReturn(run func(string, *TDto) error) *IBaseCrudRepo_Update_Call[TModel, TDto, TPage] {
	_c.Call.Return(run)
	return _c
}

// NewIBaseCrudRepo creates a new instance of IBaseCrudRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIBaseCrudRepo[TModel any, TDto models.IDTO, TPage any](t interface {
	mock.TestingT
	Cleanup(func())
}) *IBaseCrudRepo[TModel, TDto, TPage] {
	mock := &IBaseCrudRepo[TModel, TDto, TPage]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
