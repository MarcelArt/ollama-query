// Code generated by mockery v2.51.1. DO NOT EDIT.

package repositories

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"

	models "github.com/MarcelArt/ModelCraft/models"

	paginate "github.com/morkid/paginate"
)

// IAuthorizedDeviceRepo is an autogenerated mock type for the IAuthorizedDeviceRepo type
type IAuthorizedDeviceRepo struct {
	mock.Mock
}

type IAuthorizedDeviceRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *IAuthorizedDeviceRepo) EXPECT() *IAuthorizedDeviceRepo_Expecter {
	return &IAuthorizedDeviceRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: input
func (_m *IAuthorizedDeviceRepo) Create(input models.AuthorizedDeviceDTO) (uint, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(models.AuthorizedDeviceDTO) (uint, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(models.AuthorizedDeviceDTO) uint); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(models.AuthorizedDeviceDTO) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthorizedDeviceRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IAuthorizedDeviceRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - input models.AuthorizedDeviceDTO
func (_e *IAuthorizedDeviceRepo_Expecter) Create(input interface{}) *IAuthorizedDeviceRepo_Create_Call {
	return &IAuthorizedDeviceRepo_Create_Call{Call: _e.mock.On("Create", input)}
}

func (_c *IAuthorizedDeviceRepo_Create_Call) Run(run func(input models.AuthorizedDeviceDTO)) *IAuthorizedDeviceRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.AuthorizedDeviceDTO))
	})
	return _c
}

func (_c *IAuthorizedDeviceRepo_Create_Call) Return(_a0 uint, _a1 error) *IAuthorizedDeviceRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthorizedDeviceRepo_Create_Call) RunAndReturn(run func(models.AuthorizedDeviceDTO) (uint, error)) *IAuthorizedDeviceRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *IAuthorizedDeviceRepo) Delete(id string) (models.AuthorizedDevice, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 models.AuthorizedDevice
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.AuthorizedDevice, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.AuthorizedDevice); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.AuthorizedDevice)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthorizedDeviceRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IAuthorizedDeviceRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *IAuthorizedDeviceRepo_Expecter) Delete(id interface{}) *IAuthorizedDeviceRepo_Delete_Call {
	return &IAuthorizedDeviceRepo_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *IAuthorizedDeviceRepo_Delete_Call) Run(run func(id string)) *IAuthorizedDeviceRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IAuthorizedDeviceRepo_Delete_Call) Return(_a0 models.AuthorizedDevice, _a1 error) *IAuthorizedDeviceRepo_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthorizedDeviceRepo_Delete_Call) RunAndReturn(run func(string) (models.AuthorizedDevice, error)) *IAuthorizedDeviceRepo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *IAuthorizedDeviceRepo) GetByID(id string) (models.AuthorizedDevice, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.AuthorizedDevice
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.AuthorizedDevice, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.AuthorizedDevice); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.AuthorizedDevice)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthorizedDeviceRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type IAuthorizedDeviceRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *IAuthorizedDeviceRepo_Expecter) GetByID(id interface{}) *IAuthorizedDeviceRepo_GetByID_Call {
	return &IAuthorizedDeviceRepo_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *IAuthorizedDeviceRepo_GetByID_Call) Run(run func(id string)) *IAuthorizedDeviceRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IAuthorizedDeviceRepo_GetByID_Call) Return(_a0 models.AuthorizedDevice, _a1 error) *IAuthorizedDeviceRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthorizedDeviceRepo_GetByID_Call) RunAndReturn(run func(string) (models.AuthorizedDevice, error)) *IAuthorizedDeviceRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByRefreshToken provides a mock function with given fields: token
func (_m *IAuthorizedDeviceRepo) GetByRefreshToken(token string) (models.AuthorizedDeviceDTO, error) {
	ret := _m.Called(token)

	if len(ret) == 0 {
		panic("no return value specified for GetByRefreshToken")
	}

	var r0 models.AuthorizedDeviceDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.AuthorizedDeviceDTO, error)); ok {
		return rf(token)
	}
	if rf, ok := ret.Get(0).(func(string) models.AuthorizedDeviceDTO); ok {
		r0 = rf(token)
	} else {
		r0 = ret.Get(0).(models.AuthorizedDeviceDTO)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(token)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IAuthorizedDeviceRepo_GetByRefreshToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByRefreshToken'
type IAuthorizedDeviceRepo_GetByRefreshToken_Call struct {
	*mock.Call
}

// GetByRefreshToken is a helper method to define mock.On call
//   - token string
func (_e *IAuthorizedDeviceRepo_Expecter) GetByRefreshToken(token interface{}) *IAuthorizedDeviceRepo_GetByRefreshToken_Call {
	return &IAuthorizedDeviceRepo_GetByRefreshToken_Call{Call: _e.mock.On("GetByRefreshToken", token)}
}

func (_c *IAuthorizedDeviceRepo_GetByRefreshToken_Call) Run(run func(token string)) *IAuthorizedDeviceRepo_GetByRefreshToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IAuthorizedDeviceRepo_GetByRefreshToken_Call) Return(_a0 models.AuthorizedDeviceDTO, _a1 error) *IAuthorizedDeviceRepo_GetByRefreshToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IAuthorizedDeviceRepo_GetByRefreshToken_Call) RunAndReturn(run func(string) (models.AuthorizedDeviceDTO, error)) *IAuthorizedDeviceRepo_GetByRefreshToken_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: c, dest
func (_m *IAuthorizedDeviceRepo) Read(c *fiber.Ctx, dest []models.AuthorizedDevicePage) paginate.Page {
	ret := _m.Called(c, dest)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 paginate.Page
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, []models.AuthorizedDevicePage) paginate.Page); ok {
		r0 = rf(c, dest)
	} else {
		r0 = ret.Get(0).(paginate.Page)
	}

	return r0
}

// IAuthorizedDeviceRepo_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type IAuthorizedDeviceRepo_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - dest []models.AuthorizedDevicePage
func (_e *IAuthorizedDeviceRepo_Expecter) Read(c interface{}, dest interface{}) *IAuthorizedDeviceRepo_Read_Call {
	return &IAuthorizedDeviceRepo_Read_Call{Call: _e.mock.On("Read", c, dest)}
}

func (_c *IAuthorizedDeviceRepo_Read_Call) Run(run func(c *fiber.Ctx, dest []models.AuthorizedDevicePage)) *IAuthorizedDeviceRepo_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].([]models.AuthorizedDevicePage))
	})
	return _c
}

func (_c *IAuthorizedDeviceRepo_Read_Call) Return(_a0 paginate.Page) *IAuthorizedDeviceRepo_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IAuthorizedDeviceRepo_Read_Call) RunAndReturn(run func(*fiber.Ctx, []models.AuthorizedDevicePage) paginate.Page) *IAuthorizedDeviceRepo_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, input
func (_m *IAuthorizedDeviceRepo) Update(id string, input *models.AuthorizedDeviceDTO) error {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.AuthorizedDeviceDTO) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IAuthorizedDeviceRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type IAuthorizedDeviceRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id string
//   - input *models.AuthorizedDeviceDTO
func (_e *IAuthorizedDeviceRepo_Expecter) Update(id interface{}, input interface{}) *IAuthorizedDeviceRepo_Update_Call {
	return &IAuthorizedDeviceRepo_Update_Call{Call: _e.mock.On("Update", id, input)}
}

func (_c *IAuthorizedDeviceRepo_Update_Call) Run(run func(id string, input *models.AuthorizedDeviceDTO)) *IAuthorizedDeviceRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*models.AuthorizedDeviceDTO))
	})
	return _c
}

func (_c *IAuthorizedDeviceRepo_Update_Call) Return(_a0 error) *IAuthorizedDeviceRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IAuthorizedDeviceRepo_Update_Call) RunAndReturn(run func(string, *models.AuthorizedDeviceDTO) error) *IAuthorizedDeviceRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewIAuthorizedDeviceRepo creates a new instance of IAuthorizedDeviceRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIAuthorizedDeviceRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IAuthorizedDeviceRepo {
	mock := &IAuthorizedDeviceRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
