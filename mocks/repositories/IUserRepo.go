// Code generated by mockery v2.51.1. DO NOT EDIT.

package repositories

import (
	fiber "github.com/gofiber/fiber/v2"
	mock "github.com/stretchr/testify/mock"

	models "github.com/MarcelArt/ollama-query/models"

	paginate "github.com/morkid/paginate"
)

// IUserRepo is an autogenerated mock type for the IUserRepo type
type IUserRepo struct {
	mock.Mock
}

type IUserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *IUserRepo) EXPECT() *IUserRepo_Expecter {
	return &IUserRepo_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: input
func (_m *IUserRepo) Create(input models.UserDTO) (uint, error) {
	ret := _m.Called(input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(models.UserDTO) (uint, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(models.UserDTO) uint); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(models.UserDTO) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepo_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type IUserRepo_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - input models.UserDTO
func (_e *IUserRepo_Expecter) Create(input interface{}) *IUserRepo_Create_Call {
	return &IUserRepo_Create_Call{Call: _e.mock.On("Create", input)}
}

func (_c *IUserRepo_Create_Call) Run(run func(input models.UserDTO)) *IUserRepo_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(models.UserDTO))
	})
	return _c
}

func (_c *IUserRepo_Create_Call) Return(_a0 uint, _a1 error) *IUserRepo_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepo_Create_Call) RunAndReturn(run func(models.UserDTO) (uint, error)) *IUserRepo_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: id
func (_m *IUserRepo) Delete(id string) (models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepo_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type IUserRepo_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - id string
func (_e *IUserRepo_Expecter) Delete(id interface{}) *IUserRepo_Delete_Call {
	return &IUserRepo_Delete_Call{Call: _e.mock.On("Delete", id)}
}

func (_c *IUserRepo_Delete_Call) Run(run func(id string)) *IUserRepo_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IUserRepo_Delete_Call) Return(_a0 models.User, _a1 error) *IUserRepo_Delete_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepo_Delete_Call) RunAndReturn(run func(string) (models.User, error)) *IUserRepo_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// GetByID provides a mock function with given fields: id
func (_m *IUserRepo) GetByID(id string) (models.User, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetByID")
	}

	var r0 models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.User, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) models.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(models.User)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type IUserRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//   - id string
func (_e *IUserRepo_Expecter) GetByID(id interface{}) *IUserRepo_GetByID_Call {
	return &IUserRepo_GetByID_Call{Call: _e.mock.On("GetByID", id)}
}

func (_c *IUserRepo_GetByID_Call) Run(run func(id string)) *IUserRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IUserRepo_GetByID_Call) Return(_a0 models.User, _a1 error) *IUserRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepo_GetByID_Call) RunAndReturn(run func(string) (models.User, error)) *IUserRepo_GetByID_Call {
	_c.Call.Return(run)
	return _c
}

// GetByUsernameOrEmail provides a mock function with given fields: username
func (_m *IUserRepo) GetByUsernameOrEmail(username string) (models.UserDTO, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetByUsernameOrEmail")
	}

	var r0 models.UserDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (models.UserDTO, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) models.UserDTO); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(models.UserDTO)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IUserRepo_GetByUsernameOrEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByUsernameOrEmail'
type IUserRepo_GetByUsernameOrEmail_Call struct {
	*mock.Call
}

// GetByUsernameOrEmail is a helper method to define mock.On call
//   - username string
func (_e *IUserRepo_Expecter) GetByUsernameOrEmail(username interface{}) *IUserRepo_GetByUsernameOrEmail_Call {
	return &IUserRepo_GetByUsernameOrEmail_Call{Call: _e.mock.On("GetByUsernameOrEmail", username)}
}

func (_c *IUserRepo_GetByUsernameOrEmail_Call) Run(run func(username string)) *IUserRepo_GetByUsernameOrEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IUserRepo_GetByUsernameOrEmail_Call) Return(_a0 models.UserDTO, _a1 error) *IUserRepo_GetByUsernameOrEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *IUserRepo_GetByUsernameOrEmail_Call) RunAndReturn(run func(string) (models.UserDTO, error)) *IUserRepo_GetByUsernameOrEmail_Call {
	_c.Call.Return(run)
	return _c
}

// Read provides a mock function with given fields: c, dest
func (_m *IUserRepo) Read(c *fiber.Ctx, dest []models.UserPage) paginate.Page {
	ret := _m.Called(c, dest)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 paginate.Page
	if rf, ok := ret.Get(0).(func(*fiber.Ctx, []models.UserPage) paginate.Page); ok {
		r0 = rf(c, dest)
	} else {
		r0 = ret.Get(0).(paginate.Page)
	}

	return r0
}

// IUserRepo_Read_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Read'
type IUserRepo_Read_Call struct {
	*mock.Call
}

// Read is a helper method to define mock.On call
//   - c *fiber.Ctx
//   - dest []models.UserPage
func (_e *IUserRepo_Expecter) Read(c interface{}, dest interface{}) *IUserRepo_Read_Call {
	return &IUserRepo_Read_Call{Call: _e.mock.On("Read", c, dest)}
}

func (_c *IUserRepo_Read_Call) Run(run func(c *fiber.Ctx, dest []models.UserPage)) *IUserRepo_Read_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*fiber.Ctx), args[1].([]models.UserPage))
	})
	return _c
}

func (_c *IUserRepo_Read_Call) Return(_a0 paginate.Page) *IUserRepo_Read_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserRepo_Read_Call) RunAndReturn(run func(*fiber.Ctx, []models.UserPage) paginate.Page) *IUserRepo_Read_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: id, input
func (_m *IUserRepo) Update(id string, input *models.UserDTO) error {
	ret := _m.Called(id, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string, *models.UserDTO) error); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUserRepo_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type IUserRepo_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - id string
//   - input *models.UserDTO
func (_e *IUserRepo_Expecter) Update(id interface{}, input interface{}) *IUserRepo_Update_Call {
	return &IUserRepo_Update_Call{Call: _e.mock.On("Update", id, input)}
}

func (_c *IUserRepo_Update_Call) Run(run func(id string, input *models.UserDTO)) *IUserRepo_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(*models.UserDTO))
	})
	return _c
}

func (_c *IUserRepo_Update_Call) Return(_a0 error) *IUserRepo_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserRepo_Update_Call) RunAndReturn(run func(string, *models.UserDTO) error) *IUserRepo_Update_Call {
	_c.Call.Return(run)
	return _c
}

// Verify provides a mock function with given fields: id
func (_m *IUserRepo) Verify(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for Verify")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IUserRepo_Verify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Verify'
type IUserRepo_Verify_Call struct {
	*mock.Call
}

// Verify is a helper method to define mock.On call
//   - id string
func (_e *IUserRepo_Expecter) Verify(id interface{}) *IUserRepo_Verify_Call {
	return &IUserRepo_Verify_Call{Call: _e.mock.On("Verify", id)}
}

func (_c *IUserRepo_Verify_Call) Run(run func(id string)) *IUserRepo_Verify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *IUserRepo_Verify_Call) Return(_a0 error) *IUserRepo_Verify_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IUserRepo_Verify_Call) RunAndReturn(run func(string) error) *IUserRepo_Verify_Call {
	_c.Call.Return(run)
	return _c
}

// NewIUserRepo creates a new instance of IUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *IUserRepo {
	mock := &IUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
