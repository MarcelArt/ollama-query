// Code generated by mockery v2.51.1. DO NOT EDIT.

package services

import (
	services "github.com/MarcelArt/ModelCraft/services"
	mock "github.com/stretchr/testify/mock"
)

// IMailService is an autogenerated mock type for the IMailService type
type IMailService struct {
	mock.Mock
}

type IMailService_Expecter struct {
	mock *mock.Mock
}

func (_m *IMailService) EXPECT() *IMailService_Expecter {
	return &IMailService_Expecter{mock: &_m.Mock}
}

// SendMail provides a mock function with given fields: m
func (_m *IMailService) SendMail(m services.Mailer) error {
	ret := _m.Called(m)

	if len(ret) == 0 {
		panic("no return value specified for SendMail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(services.Mailer) error); ok {
		r0 = rf(m)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IMailService_SendMail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendMail'
type IMailService_SendMail_Call struct {
	*mock.Call
}

// SendMail is a helper method to define mock.On call
//   - m services.Mailer
func (_e *IMailService_Expecter) SendMail(m interface{}) *IMailService_SendMail_Call {
	return &IMailService_SendMail_Call{Call: _e.mock.On("SendMail", m)}
}

func (_c *IMailService_SendMail_Call) Run(run func(m services.Mailer)) *IMailService_SendMail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(services.Mailer))
	})
	return _c
}

func (_c *IMailService_SendMail_Call) Return(_a0 error) *IMailService_SendMail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *IMailService_SendMail_Call) RunAndReturn(run func(services.Mailer) error) *IMailService_SendMail_Call {
	_c.Call.Return(run)
	return _c
}

// NewIMailService creates a new instance of IMailService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIMailService(t interface {
	mock.TestingT
	Cleanup(func())
}) *IMailService {
	mock := &IMailService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
